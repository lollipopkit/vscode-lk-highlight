{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "lk",
	"patterns": [
		{
			"begin": "\\b(?:(shy)\\s*)?(fn)\\s*([a-zA-Z_]\\w*(?:[.:]([a-zA-Z_]\\w*))*)?\\(",
			"end": "\\)(?:\\s*(:)\\s*(.+?)(?=\\s*\\b(?:([^\\w.,<])|\\)>)\\s*\\w|\\s*$))?",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.shy.lk"
				},
				"2": {
					"name": "keyword.control.lk"
				},
				"3": {
					"patterns": [
						{
							"match": "\\b(__add|__sub|__div|__idiv|__eq|__le|__len|__lt|__mod|__mul|__pow|__band|__bor|__bxor|__bnot|__shl|__shr|__unm|__str)\\b",
							"name": "variable.language.metamethod.lk"
						},
						{
							"match": "\\b(__call|__index|__metatable|__iter|__newindex|__name)\\b",
							"name": "variable.language.metamethod.lk"
						}
					],
					"name": "entity.name.function.lk"
				}
			},
			"endCaptures": {
				"1": {
					"name": "keyword.operator.type.lk"
				},
				"2": {
					"patterns": [
						{
							"include": "#type_literal"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"match": ">",
							"name": "keyword.operator.type.lk"
						}
					]
				}
			},
			"patterns": [
				{
					"match": ":",
					"name": "keyword.operator.type.lk"
				},
				{
					"match": "(?<![:>.]\\s*)\\b_\\b",
					"name": "variable.parameter.lk"
				},
				{
					"match": "(?<![:>.]\\s*)\\b([A-Z_][A-Z0-9_]*)\\b",
					"name": "variable.other.constant.lk"
				},
				{
					"match": "(?<![:>.]\\s*)\\b([a-zA-Z_]\\w*)\\b",
					"name": "variable.parameter.lk"
				},
				{
					"include": "#type_literal"
				}
			],
			"contentName": "meta.parameters.lk",
			"name": "meta.function.lk"
		},
		{
			"begin": "\\b(?:(shy)\\s+\\b)",
			"end": "(?=\\s*do\\b|\\s*[=;]|\\s*$)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.shy.lk"
				}
			},
			"patterns": [
				{
					"match": ":",
					"name": "keyword.operator.type.lk"
				},
				{
					"match": "(?<![:>.]\\s*)\\b_\\b",
					"name": "variable.parameter.lk"
				},
				{
					"match": "(?<![:>.]\\s*)\\b([A-Z_][A-Z0-9_]*)\\b",
					"name": "variable.other.constant.lk"
				},
				{
					"match": "(?<![:>.]\\s*)\\b([a-zA-Z_]\\w*)\\b",
					"name": "variable.other.lk"
				},
				{
					"include": "#type_literal"
				}
			]
		},
		{
			"match": "\\b(for)\\s+([^=]+)\\b(in)\\b",
			"captures": {
				"1": {
					"name": "keyword.control.lk"
				},
				"2": {
					"patterns": [
						{
							"match": ":",
							"name": "keyword.operator.type.lk"
						},
						{
							"match": "(?<![:>.]\\s*)\\b_\\b",
							"name": "variable.parameter.lk"
						},
						{
							"match": "(?<![:>.]\\s*)\\b([A-Z_][A-Z0-9_]*)\\b",
							"name": "variable.other.constant.lk"
						},
						{
							"match": "(?<![:>.]\\s*)\\b([a-zA-Z_]\\w*)\\b",
							"name": "variable.parameter.lk"
						},
						{
							"include": "#type_literal"
						}
					]
				},
				"3": {
					"name": "keyword.control.lk"
				}
			}
		},
		{
			"begin": "\\b(fn)\\s*\\(.*?\\)\\s*(=>)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.lk"
				},
				"2": {
					"name": "keyword.operator.arrow.lk"
				}
			},
			"end": "(?=[,;\\)}]|$)",
			"patterns": [
				{
					"include": "$self"
				}
			],
			"name": "meta.arrow-function.lk"
		},
		{
			"begin": "([a-zA-Z_]\\w*)\\s*:=\\s*(fn)\\s*\\(.*?\\)\\s*(=>)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.lk"
				},
				"2": {
					"name": "keyword.control.lk"
				},
				"3": {
					"name": "keyword.operator.arrow.lk"
				}
			},
			"end": "(?=[,;\\)}]|$)",
			"patterns": [
				{
					"include": "$self"
				}
			],
			"name": "meta.arrow-function.assignment.lk"
		},
		{
			"begin": "\\b(class)\\s+([a-zA-Z_]\\w*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.class.lk"
				},
				"2": {
					"name": "entity.name.class.lk"
				}
			},
			"end": "(?={)",
			"patterns": [
				{
					"include": "$self"
				}
			],
			"name": "meta.class.lk"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#language_constants"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#identifier"
		},
		{
			"include": "#standard_library"
		},
		{
			"include": "#operators"
		},
		{
			"begin": "\\b(import)\\s+(['\"])(.*?)\\2",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.import.lk"
				},
				"3": {
					"name": "string.quoted.module.lk"
				}
			},
			"end": "(?=\\s*[;\\n])",
			"name": "meta.import.lk"
		},
		{
			"match": "([a-zA-Z_]\\w*)\\s*(:=)\\s*\\b(import)\\s*\\(",
			"captures": {
				"1": {
					"name": "variable.other.lk"
				},
				"2": {
					"name": "keyword.operator.assignment.lk"
				},
				"3": {
					"name": "keyword.control.import.lk"
				}
			},
			"name": "meta.import.alias.lk"
		},
		{
			"match": "\\b(new)\\s*\\((\\w+)\\)",
			"captures": {
				"1": {
					"name": "keyword.control.new.lk"
				},
				"2": {
					"name": "entity.name.class.lk"
				}
			},
			"name": "meta.instance.lk"
		},
		{
			"match": "([a-zA-Z_]\\w*)\\s*(:)\\s*([a-zA-Z_]\\w*)\\s*\\(",
			"captures": {
				"1": {
					"name": "variable.other.lk"
				},
				"2": {
					"name": "punctuation.accessor.colon.lk"
				},
				"3": {
					"name": "entity.name.function.lk"
				}
			},
			"name": "meta.method.call.lk"
		}
	],
	"repository": {
		"standard_library": {
			"patterns": [
				{
					"match": "\\b(_G|_VERSION)\\b",
					"name": "support.constant.lk"
				},
				{
					"match": "\\b(sync|math|math\\.huge|math\\.pi|os|strs|table|utf8|utf8\\.charpattern|coroutine|fmt|to_str|str|printf)\\b",
					"name": "support.constant.lk"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\bshy\\b",
					"name": "storage.modifier.shy.lk"
				},
				{
					"match": "\\b(break|else|for|if|elif|rt|while|fn|in|class|import|new)\\b",
					"name": "keyword.control.lk"
				},
				{
					"match":"(?<![:.])\\s*\\b(self)\\b",
					"captures": {
						"1": {
							"name": "variable.language.self.lk"
						}
					}
				},
				{
					"match": "(\\.\\.\\.)",
					"name": "keyword.other.unit.lk"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(\\+|-(?!-)|/|\\*|%|\\^)",
					"name": "keyword.operator.arithmetic.lk"
				},
				{
					"match": "\\b(and|or|not)\\b",
					"name": "keyword.operator.logical.lk"
				},
				{
					"match": "(\\+=|-=|/=|\\*=|%=|\\^=|=|:=|\\+\\+|--)",
					"name": "keyword.operator.assignment.lk"
				},
				{
					"match": "(=>)",
					"name": "keyword.operator.arrow.lk"
				},
				{
					"match": "(\\?|:)",
					"name": "keyword.operator.ternary.lk"
				},
				{
					"match": "(\\#)",
					"name": "keyword.operator.length.lk"
				},
				{
					"match": "(==|!=|>=|>|<=|<)",
					"name": "keyword.operator.comparison.lk"
				},
				{
					"match": "(~\\/|&|\\||\\^|~|<<|>>)",
					"name": "keyword.operator.bitwise.lk"
				}
			]
		},
		"language_constants": {
			"patterns": [
				{
					"match": "\\btrue\\b",
					"name": "constant.language.boolean.true.lk"
				},
				{
					"match": "\\bfalse\\b",
					"name": "constant.language.boolean.false.lk"
				},
				{
					"match": "\\bnil\\b",
					"name": "constant.language.nil.lk"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "\\b0_*[xX]_*[\\da-fA-F_]*(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?",
					"name": "constant.numeric.hex.lk"
				},
				{
					"match": "\\b0_*[bB][01_]+(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?",
					"name": "constant.numeric.binary.lk"
				},
				{
					"match": "(?:\\d[\\d_]*(?:\\.[\\d_]*)?|\\.\\d[\\d_]*)(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?",
					"name": "constant.numeric.decimal.lk"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{"include": "#string_escape"}
					],
					"name": "string.quoted.double.lk"
				},
				{
					"begin": "'",
					"end": "'",
					"patterns": [
						{"include": "#string_escape"}
					],
					"name": "string.quoted.single.lk"
				},
				{
					"begin": "`",
					"end": "`",
					"patterns": [
						{
							"match": "^\\n",
							"name": "constant.character.escape.newline.lk"
						}
					],
					"name": "string.quoted.other.multiline.lk"
				}
			]
		},
		"string_escape": {
			"patterns": [
				{
					"match": "\\\\[abfnrtvz'\"\\\\]",
					"name": "constant.character.escape.lk"
				},
				{
					"match": "\\\\\\d{1,3}",
					"name": "constant.character.escape.decimal.lk"
				},
				{
					"match": "\\\\x[0-9a-fA-F]{2}",
					"name": "constant.character.escape.hex.lk"
				},
				{
					"match": "\\\\u\\{[0-9a-fA-F]*\\}",
					"name": "constant.character.escape.unicode.lk"
				}
			]
		},
		"identifier": {
			"patterns": [
				{
					"match": "\\b([A-Z_][A-Z0-9_]*)\\b",
					"name": "variable.other.constant.lk"
				},
				{
					"match": "\\b[a-zA-Z_]\\w*(?=:)",
					"name": "variable.other.lk"
				},
				{
					"match": "\\b[a-zA-Z_]\\w*(?=\\()",
					"name": "entity.name.function.lk"
				},
				{
					"match": "(?<=:)([a-zA-Z_]\\w*)\\b(?=\\()",
					"name": "entity.name.function.lk"
				},
				{
					"match": "(?<=\\.)([a-zA-Z_]\\w*)\\b",
					"name": "support.variable.property.lk"
				},
				{
					"match": "\\[['\"](.*?)['\"]\\]",
					"captures": {
						"1": {
							"name": "support.variable.property.quoted.lk"
						}
					},
					"name": "meta.brackets.lk"
				},
				{
					"match": "\\b([a-zA-Z_]\\w*)\\b",
					"name": "variable.other.readwrite.lk"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"name": "comment.block.lk"
				},
				{
					"begin": "//",
					"end": "$",
					"name": "comment.line.double-dash.lk"
				},
				{
					"begin": "^#!/.*\\blk\\b",
					"end": "$",
					"name": "comment.line"
				}
			]
		},
		"type_literal": {
			"patterns": [
				{
					"match": "(\\?)",
					"name": "keyword.operator.type.lk"
				},
				{
					"match": "(->)",
					"name": "keyword.operator.type.lk"
				},
				{
					"begin": "\\b(typeof)\\b\\s*\\(",
					"end": "(?=\\))",
					"beginCaptures": {
						"1": {
							"name": "support.function.lk"
						}
					},
					"patterns": [
						{
							"include": "source.lk"
						}
					]
				},
				{
					"begin": "\\b([a-zA-Z]\\w*)\\b(<)",
					"end": "(>)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.lk"
						},
						"2": {
							"name": "keyword.operator.type.lk"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.operator.type.lk"
						}
					},
					"patterns": [
						{
							"include": "#type_literal"
						}
					],
					"contentName": "meta.parameter.type.variable"
				},
				{
					"match": "\\b(nil|str|num|bool|table)\\b",
					"name": "support.type.primitive.lk"
				},
				{
					"match": "\\b([a-zA-Z]\\w*)\\b",
					"name": "entity.name.type.lk"
				},
				{
					"begin": "\\{",
					"end": "\\}",
					"patterns": [
						{
							"match": ":",
							"name": "keyword.operator.type.lk"
						},
						{
							"begin": "\\[",
							"end": "\\]",
							"patterns": [
								{
									"include": "#type_literal"
								}
							]
						},
						{
							"match": "(?<!:\\s*|->\\s*)\\b([a-zA-Z_]\\w*)\\b",
							"name": "variable.other.field.lk"
						},
						{
							"include": "#type_literal"
						}
					]
				},
				{
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#type_literal"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.lk"
}
